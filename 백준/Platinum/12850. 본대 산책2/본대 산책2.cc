#pragma warning(disable:4996)  
#include <iostream>
#include <algorithm>
#include <vector>
#define M 1'000'000'007
using namespace std;
using ll = long long;
ll n, ans[8][8], tmp[8][8];
void p(ll (&x)[8][8], ll (&y)[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            tmp[i][j] = 0;
            for (int k = 0; k < 8; k++)
            {
                tmp[i][j] += (x[i][k] % M * y[k][j] % M) % M;
                tmp[i][j] %= M;
            }
        }
    }
    for (int i = 0; i < 64; i++) x[i / 8][i % 8] = tmp[i / 8][i % 8];
}
int main()
{
    ll matrix[8][8] = {
        {0, 1, 1, 0, 0, 0, 0, 0},
        {1, 0, 1, 1, 0, 0, 0, 0},
        {1, 1, 0, 1, 1, 0, 0, 0},
        {0, 1, 1, 0, 1, 1, 0, 0},
        {0, 0, 1, 1, 0, 1, 1, 0},
        {0, 0, 0, 1, 1, 0, 0, 1},
        {0, 0, 0, 0, 1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 1, 0},
    };
    for (int i = 0; i < 8; i++) ans[i][i] = 1;
    cin >> n;
    while (n)
    {
        if (n & 1)
            p(ans, matrix);
        p(matrix, matrix);
        n /= 2;
    }
    // n이 홀수건 짝수건 2로 나누면 1에 도착하므로 ans에 답이 저장됨
    cout << ans[0][0];
    return 0;
}

/*
행렬 제곱할 횟수를 n이라고 가정
n번 제곱하면 각 위치마다 n번만에 올 수 있는 경우의 수가 나옴

0 1 1 0
1 0 1 1
1 1 0 1
0 1 1 0
위 같은 인접 행렬이 있다고 했을 때 = M
한 번 제곱하면 다음과 같은 결과가 나옴

2 1 1 2
1 3 2 1
1 2 3 1
2 1 1 2
위는 M^2
결과는 i에서 j까지 가는데 최대 깊이가 2일 때 경로의 개수임

문제를 보면 행렬을 최악의 경우 10억번 제곱해야 함
시간복잡도는 1e10 * 7^2임

제곱의 성질과 분할 정복을 사용하여 문제를 해결
제곱해야 할 수가 10일 때 아래와 같이 한 번 구해놓고 다시 계산하지 않는 식으로 구현한다.
   x^10
  |   |
 x^5  x^5
 |  |
x^2 x^2
깊이 0에서 우측 자식의 연산 결과를 위해 탐색할 필요 없음
좌측 자식의 연산 결과를 그냥 사용하면 됨
*/